Look at the attached Javascript, and make a mobile web page that displays a Board.
The Board will have several Column items with a fixed width.
Each Column will have several Task items that be displayed one above the other in the Column, each Task using as much height as is necessary to fully display the Task's label and text.

There may be many times more Tasks than can safely appear as elements on a web page.
As the user pinces to zoom the viewport, and as they scroll the viewport horizontally or vertically, different Columns and Tasks will be within the visible viewport.
The page should not have elements for Columns and Tasks that are not visible in the viewport, because the browser DOM cannot handle that many Elements.
The web page code should create and load the necessary Column and Task Elements as they become visible through scrolling or zooming out, and it should remove Elements from the DOM when they are outside the viewport.

------------
There are several problems with this result:

- The scroll event handler only fires once at initial rendering. I believe that this is because of the overflow: hidden styling. I think that maybe the handler needs to be on an element that has overflow: auto.
- DIV Elements are being created for all of the Tasks within a Column, regardless of whether they are visible in the viewport. Fixing this is not trivial, because the DIVs are not of uniform height.
- The Column header should be fixed at the top. Each Column's items should scroll below it's header, independingly of the other columns.

I suspect that the whole approach is incorrect: we cannot use the scroll position to determine which Tasks should be visible. I think maybe an "infinite paging scroll" mechanism would be better, in which the actual IntersectionObserver.




